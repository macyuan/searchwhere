package com.mytian.lb;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "PLAN_NODE_TABLE".
 */
public class PlanNodeTable implements java.io.Serializable {

    private Long id;
    private Double nodeLatitude;
    private Double nodeLongitude;
    private String nodeAddress;
    private Long typeID;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PlanNodeTableDao myDao;

    private RouteLineNodeTable routeLineNodeTable;
    private Long routeLineNodeTable__resolvedKey;


    public PlanNodeTable() {
    }

    public PlanNodeTable(Long id) {
        this.id = id;
    }

    public PlanNodeTable(Long id, Double nodeLatitude, Double nodeLongitude, String nodeAddress, Long typeID) {
        this.id = id;
        this.nodeLatitude = nodeLatitude;
        this.nodeLongitude = nodeLongitude;
        this.nodeAddress = nodeAddress;
        this.typeID = typeID;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPlanNodeTableDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Double getNodeLatitude() {
        return nodeLatitude;
    }

    public void setNodeLatitude(Double nodeLatitude) {
        this.nodeLatitude = nodeLatitude;
    }

    public Double getNodeLongitude() {
        return nodeLongitude;
    }

    public void setNodeLongitude(Double nodeLongitude) {
        this.nodeLongitude = nodeLongitude;
    }

    public String getNodeAddress() {
        return nodeAddress;
    }

    public void setNodeAddress(String nodeAddress) {
        this.nodeAddress = nodeAddress;
    }

    public Long getTypeID() {
        return typeID;
    }

    public void setTypeID(Long typeID) {
        this.typeID = typeID;
    }

    /** To-one relationship, resolved on first access. */
    public RouteLineNodeTable getRouteLineNodeTable() {
        Long __key = this.typeID;
        if (routeLineNodeTable__resolvedKey == null || !routeLineNodeTable__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RouteLineNodeTableDao targetDao = daoSession.getRouteLineNodeTableDao();
            RouteLineNodeTable routeLineNodeTableNew = targetDao.load(__key);
            synchronized (this) {
                routeLineNodeTable = routeLineNodeTableNew;
            	routeLineNodeTable__resolvedKey = __key;
            }
        }
        return routeLineNodeTable;
    }

    public void setRouteLineNodeTable(RouteLineNodeTable routeLineNodeTable) {
        synchronized (this) {
            this.routeLineNodeTable = routeLineNodeTable;
            typeID = routeLineNodeTable == null ? null : routeLineNodeTable.getId();
            routeLineNodeTable__resolvedKey = typeID;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
